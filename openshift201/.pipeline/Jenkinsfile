#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "4zq6uj-mitovskaol-ocp201-tst-tools"
def DEV_NAMESPACE = "4zq6uj-mitovskaol-ocp201-tst-dev"
def PROD_NAMESPACE = "4zq6uj-mitovskaol-ocp201-tst-prod"
def LOKI_SERVICE = "mitovskaol-loki"

//Pipeline
node {
            stage ('Deploy Loki to Dev'){
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc = openshift.selector('statefulset', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                        }
                    }
                }
             }
            stage ('Build Prod'){
                input message: 'Approve Deploy?', ok: 'Yes'
                dir ('simple_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} -p NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 60, unit: "SECONDS"){
                    openshift.withCluster() {
                        openshift.withProject("${PROD_NAMESPACE}") {
                        def dc = openshift.selector('statefulset', "${LOKI_SERVICE}")
                        // this will wait until the desired replicas are available
                        dc.rollout().status()
                        }
                    }
                    }
                }
            }
    }